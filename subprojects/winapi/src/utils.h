#ifndef FEJIX_WINAPI_UTILS_H_
#define FEJIX_WINAPI_UTILS_H_


#include <fejix/core/base.h>

#include <windows.h>


/**
    Converts UTF-8 to Windows multibyte ("wide") encoding.
    The returned string must be freed manually.

    :param out_utf16_string: Returns the converted string or NULL.
    :returns: Error if the given string is invalid UTF-8.
*/
fj_err_t fj_winapi_into_utf16(char const *string, LPWSTR *out_utf16_string);

/** :param out_string: Returns the converted UTF-8 string or NULL. */
fj_err_t fj_winapi_from_utf16(LPWSTR utf16_string, char const **out_string);

/**
    Registers a window class and creates a window with it.

    :param class_info:
        If NULL and the class name in ``window_info`` is NULL, a new class with default parameters
        is used.
        If NULL and the class name in ``window_info`` is NOT NULL, that class is used instead.

        The class name is ignored. It is automatically generated by the library to
        indicate that the class must be destroyed when with the window.

        Some fields, if unspecified, fall back to the defaults:
        * class name: a special class name generated by the library.
        * instance: ``GetModuleHandle(NULL)``.
        * window procedure: ``DefWindowProc``.

    :param window_info:
        If NULL, the default parameters are used.

        The class name is ignored if you do not explicitly indicate that you want your custom class
        to be used. To indicate that, pass NULL to ``class_info`` and the class name into here.

        Some fields, if unspecified, fall back to the defaults:
        * class name: the special name of a newly created class (if it is created).
        * instance: ``GetModulehandle(NULL)``.
*/
fj_err_t fj_winapi_window_create(
    HWND *out_window, WNDCLASSEX const *class_info, CREATESTRUCT const *window_info);

/**
    Destroys the window. If the library created a window class for that specific window with
    ``fj_winapi_window_create()``, the class is also destroyed.
*/
fj_err_t fj_winapi_window_destroy(HWND window);

void fj_winapi_window_set_data(HWND window, void *data);

void *fj_winapi_window_get_data(HWND window);


#endif

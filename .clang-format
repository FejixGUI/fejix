# Requires clang-format v18

BasedOnStyle: Chromium

LineEnding: LF
ColumnLimit: 100
IndentWidth: 4
InsertNewlineAtEOF: true

# int x()
# {
#     ...
# }
#               <- allows us to separate functions with 2 empty lines
#               <- separate function definitions with 2 empty lines
# int y()
# {
#     ...
# }
MaxEmptyLinesToKeep: 2
SeparateDefinitionBlocks: Leave

# int x() { }
#          ^
SpaceInEmptyBlock: true

# (int) x
#      ^
SpaceAfterCStyleCast: true

# (struct x) {
#     .s = (struct s) {
#         .x = 1,
#         .y = 2,       <- put trailing commas everywhere for the magic to work
#     },                <- put trailing commas everywhere for the magic to work
# }
SpaceBeforeCpp11BracedList: true
Cpp11BracedListStyle: false

# myvar = somethinglonglonglonglong
#   + somethinglonglonglonglong
#   + somethinglonglonglonglong;
AlignOperands: DontAlign
BreakBeforeBinaryOperators: NonAssignment
PenaltyBreakAssignment: 100

# int x()
# {                             <-
#     if (x) {                  <-
#        ...
#     }
#
#     for (somethinglonglonglonglong;
#          somethinglonglonglonglong;
#          somethinglonglonglonglong)
#     {                         <-
#         ...
#     }
# }
BreakBeforeBraces: Custom
BraceWrapping:
    AfterControlStatement: MultiLine
    AfterFunction: true
    AfterClass: true
    AfterNamespace: true

# [[attribute]]
# somethinglonglonglonglong x(
#     somethinglonglonglonglong,
#     somethinglonglonglonglong
# )
BreakAfterAttributes: Always
BinPackArguments: false
AlignAfterOpenBracket: BlockIndent
PenaltyReturnTypeOnItsOwnLine: 1000

# static inline int *f(struct X const *const *x);
QualifierAlignment: Custom
QualifierOrder: ['static', 'inline', 'type', 'const', 'volatile', 'restrict']
PointerAlignment: Right
SpaceAroundPointerQualifiers: After

# #define A         \
#     something     \
#     and           \
#     somethingelse \
AlignEscapedNewlines: Left

# #ifdef something
# #    include <something>
# #endif
IndentPPDirectives: AfterHash

Macros:
    # FIXME clang-format v18 bug: bad function typedef recognition, incorrect macro formatting
    # As a workaround we make the expansion text roughly the same length as the macro name.
    # The right non-workaround solution would be to define it as an empty macro.
    - 'FJ_OPENGL_ABI_CALL=*const*const*const'

    - 'FJ_EXPORT=[[unused]]'

IfMacros:
    - 'FJ_TRY'

AttributeMacros:
    - 'CALLBACK'
    - 'WINAPI'
    - 'WINUSERAPI'

# Sort includes
IncludeBlocks: Regroup
IncludeCategories:
    # Private headers
    -   Regex: '^<src/'
        Priority: 1
        CaseSensitive: true

    # Public interface headers
    -   Regex: '^<fejix/interface/'
        Priority: 5
        CaseSensitive: true

    # Public ext headers
    -   Regex: '^<fejix/ext/'
        Priority: 10
        CaseSensitive: true

    # Public core headers
    -   Regex: '^<fejix/core/'
        Priority: 15
        CaseSensitive: true

    # Toplevel headers (matched if all regexes above did not match)
    -   Regex: '^<fejix/'
        Priority: 2
        CaseSensitive: true

    # Dependency headers
    -   Regex: '^<(wayland|X11|xcb|win|imm|shellapi|ole|dx|d3d|dcomp)'
        Priority: 20
        CaseSensitive: true

    # Standard includes (at the bottom)
    -   Regex: '^<(assert|complex|ctype|errno|fenv|float|inttypes|limits|locale|malloc|math|setjmp|signal|stdarg|stdbool|stddef|stdint|stdio|stdlib|string|tgmath|time|wchar|wctype).h>'
        Priority: 100
        CaseSensitive: true

    # Other platform-specific headers (matched if all regexes above did not match)
    -   Regex: '^.*'
        Priority: 50

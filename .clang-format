# Written for clang-format v18
#
# Good practices for using this config:
# * put 2 empty lines between function blocks for good visual separation
# * put trailing commas in enums and struct/array initialisers to split them into multiple lines

BasedOnStyle: Chromium

IndentWidth: 4
ColumnLimit: 100
LineEnding: LF
InsertNewlineAtEOF: true

# int x()
# {
#     ...
# }
#               <- keeps these lines
#               <-
# int y()
# {
#     ...
# }
MaxEmptyLinesToKeep: 2
SeparateDefinitionBlocks: Leave

# [[attribute]]
# static inline int *foo(struct bar const *const *baz);
BreakAfterAttributes: Always
QualifierAlignment: Custom
QualifierOrder: ['static', 'inline', 'type', 'const', 'volatile', 'restrict']
PointerAlignment: Right
SpaceAroundPointerQualifiers: After

# void f(something, something);
#
# void f(
#     somethinglong, somethinglong, somethinglong);
#
# void f(
#     somethingveryverylong,
#     somethingveryverylong,
#     somethingveryverylong);
PenaltyReturnTypeOnItsOwnLine: 1000
AlignAfterOpenBracket: AlwaysBreak
BinPackArguments: false
AllowAllParametersOfDeclarationOnNextLine: true

# int x()
# {                             <-
#     if (x) {                  <-
#        ...
#     }
#
#     for (somethinglonglonglonglong;
#          somethinglonglonglonglong;
#          somethinglonglonglonglong)
#     {                         <-
#         ...
#     }
# }
BreakBeforeBraces: Custom
BraceWrapping:
    AfterControlStatement: MultiLine
    AfterFunction: true
    AfterClass: true
    AfterNamespace: true

# int x() { }
#          ^
SpaceInEmptyBlock: true

# (int) x
#      ^
SpaceAfterCStyleCast: true

# switch (x) {
#     case 1:
# ^^^^    something();
# ^^^^    break;
# }
IndentCaseLabels: true

# myvar
#   = somethinglonglonglonglong
#   + somethinglonglonglonglong
#   + somethinglonglonglonglong;
BreakBeforeBinaryOperators: All
AlignOperands: DontAlign

# (struct x) {
#     .s = (struct s) {
#         .x = 1,
#         .y = 2,       <- put trailing commas everywhere for the magic to work
#     },                <-
# }
SpaceBeforeCpp11BracedList: true
Cpp11BracedListStyle: false

# #define A         \
#     something     \
#     and           \
#     somethingelse \
AlignEscapedNewlines: Left

# #ifdef something
# #    include <something>
# #endif
IndentPPDirectives: AfterHash

Macros:
    # This tricks clang-format into correctly formatting calling conventions in function pointer
    # declarations and typedefs.
    # The problem is that clang-format does not fully understand the code semantics.
    - 'FJ_OPENGL_CALL=*********const'

    # This tricks clang-format into leaving FJ_PUBLIC on its own line.
    - 'FJ_PUBLIC=[[unused]]'

IfMacros:
    - 'FJ_TRY'

AttributeMacros:
    - 'CALLBACK'
    - 'WINAPI'
    - 'WINUSERAPI'

# Sort includes
IncludeBlocks: Regroup
IncludeCategories:
    # Private headers
    -   Regex: '^<src/'
        Priority: 1
        CaseSensitive: true

    # Public ext headers
    -   Regex: '^<fejix/ext/'
        Priority: 10
        CaseSensitive: true

    # Public core headers
    -   Regex: '^<fejix/core/'
        Priority: 15
        CaseSensitive: true

    # Public (matched if all regexes above did not match)
    -   Regex: '^<fejix/'
        Priority: 2
        CaseSensitive: true

    # Standard includes (at the bottom)
    -   Regex: '^<(assert|complex|ctype|errno|fenv|float|inttypes|limits|locale|malloc|math|setjmp|signal|stdarg|stdbool|stddef|stdint|stdio|stdlib|string|tgmath|time|wchar|wctype).h>'
        Priority: 100
        CaseSensitive: true

    # Platform-specific headers (matched if all regexes above did not match)
    -   Regex: '^.*'
        Priority: 50

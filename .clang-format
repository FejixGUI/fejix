---
# Config for clang-format v17+
#
# Some notes:
#
# * Put 2 empty lines between function blocks for good visual separation.
#
# * Put trailing commas inside enums and struct/array initializations that
#   should be split into multiple lines:
#
#    enum { X = 1 }; // no comma here
#
#    enum {
#        X = 1, // notice the comma here
#    };
#
#    struct S s = { .x = 1, .y = 2 }; // no comma after '2' here
#
#    struct S s = {
#        .x = 1,
#        .y = 2, // <- notice the comma after '2' here
#    };
#
# * Format comments consistently with function declaration parentheses:
#
#    /** This is some long long long long long long long long long long long
#        long long long long long long long comment */
#    void this_is_some_long_long_long_long_long_long_long_long_function(
#        int a, int b, int c, int d, int e);
#
# Unfortunately, clang-format is reasonably good only at the LLVM style.
# This config implements a somewhat similar style in order not to fight against
# the tooling that is supposed to help us.

Language: Cpp
Standard: c++17

# Just in case, fall back to a more sensible style than LLVM
BasedOnStyle: Chromium

IndentWidth: 4
ColumnLimit: 80
LineEnding: LF
InsertNewlineAtEOF: true

# enum X
# {                                     <-
#     ...
# }
#
# struct X
# {                                     <-
#     ...
# }
#
# int x()
# {                                     <-
#     if (x) {                          <-
#        ...
#     }
#
#     for (somethinglonglonglonglong;
#          somethinglonglonglonglong;
#          somethinglonglonglonglong)
#     {                                 <-
#         ...
#     }
# }
#
# void f(void) { }                      <-
# struct X { }                          <-
BreakBeforeBraces: Custom
BraceWrapping:
    AfterNamespace: true
    AfterClass: true
    AfterStruct: true
    AfterEnum: true
    AfterUnion: true
    AfterObjCDeclaration: true
    AfterFunction: true
    AfterControlStatement: MultiLine
    AfterExternBlock: true
    BeforeLambdaBody: false
    SplitEmptyFunction: false
    SplitEmptyRecord: false
    SplitEmptyNamespace: false
AllowShortFunctionsOnASingleLine: None

# int x()
# {
#     ...
# }
#                   <- keeps empty lines here
#                   <-
# int y()
# {                 <- does not keep empty lines here
#     if (...) {    <-
#         dosth();  <-
#     }
# }
SeparateDefinitionBlocks: Leave
MaxEmptyLinesToKeep: 2
KeepEmptyLinesAtTheStartOfBlocks: false

# template<typename T>
# [[attribute]]
# static inline int *foo(struct bar const *const *baz);
AlwaysBreakTemplateDeclarations: Yes
BreakAfterAttributes: Always
QualifierAlignment: Custom
QualifierOrder: ['static', 'inline', 'type', 'const', 'volatile', 'restrict']
PointerAlignment: Right
SpaceAroundPointerQualifiers: After

# void f(something, something);
#
# void f(
#     somethinglong, somethinglong, somethinglong);
#
# void f(
#     somethingveryverylong,
#     somethingveryverylong,
#     somethingveryverylong);
PenaltyReturnTypeOnItsOwnLine: 1000
AlignAfterOpenBracket: AlwaysBreak
BinPackArguments: false
BinPackParameters: false
AllowAllParametersOfDeclarationOnNextLine: true

# class Something
# {
#     Something() : something(), something(), something()
#
#     Something()
#         : somethinglong(), somethinglong(), somethinglong()
#
#     Something()
#         : somethingveryverylong(),
#           somethingveryverylong(),
#           somethingveryverylong()
# }
PackConstructorInitializers: NextLine

# (struct x) { .s = (struct s) { .x = 1, .y = 2 } }
#
# (struct x) {
#     .s = (struct s) {
#         .x = 1,
#         .y = 2,           <- put trailing commas everywhere
#     },                    <- for the magic to work
# }
SpaceBeforeCpp11BracedList: true
Cpp11BracedListStyle: false

# CppThing thing = { }
#                   ^
SpaceInEmptyBlock: true

# (int) x
#      ^
SpaceAfterCStyleCast: true

# something();  // something
#             ^^
SpacesBeforeTrailingComments: 2

# switch (x) {
#     case 1:               <-
#         something();
#         break;
# }
IndentCaseLabels: true

# class X
# {
# public:                   <-
#     void something();
# }
AccessModifierOffset: -1

# myvar
#   = somethinglonglonglonglong
#   + somethinglonglonglonglong
#   + somethinglonglonglonglong;
BreakBeforeBinaryOperators: All
AlignOperands: DontAlign

# myvar = somethingshort(
#     somethinglong, somethinglong);
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 1

# mystring
#     = "somethinglonglonglonglong"
#       "somethinglonglonglonglong";
AlwaysBreakBeforeMultilineStrings: true

# #define A         \
#     something     \
#     and           \
#     somethingelse \
AlignEscapedNewlines: Left

# #ifdef something
# #    include <something>
# #endif
IndentPPDirectives: AfterHash

# ===== END CODE STYLE, BEGIN PROJECT-SPECIFIC SETTINGS AND WORKAROUNDS  =====

# Macros can still confuse clang-format so badly that you will definitely use
# the
# // clang-format off ... // clang-format on
# trick at times.
Macros:
    # This tricks clang-format into correctly formatting calling conventions in
    # function pointer declarations and typedefs. The problem is that
    # clang-format does not fully understand the code semantics and poorly
    # handles macro expansions. The expansion here must match the macro name
    # character length in order for clang-format to handle the column limit
    # correctly.
    #
    # Example usage:
    #   typedef int (FJ_OPENGL_CALL *some_function_type)(int arg, int arg2);
    - 'FJ_OPENGL_CALL=*********const'

    # This tricks clang-format into leaving these macros on their own lines.
    # clang-format does not support proper custom attributes as of now.
    - 'FJ_PUBLIC=[[aaaaa]]'


# This list goes from the most to the least interesting headers (subjectively)
IncludeBlocks: Regroup
IncludeCategories:
    # Implicit priority of 0 is reserved for the main header:
    #     #include "same-file-name.h"

    -   Regex: '^<src/shared/'
        Priority: 30

    -   Regex: '^<src/'
        Priority: 20

    -   Regex: '^<fejix/'
        Priority: 10

    -   Regex: '^<(assert|complex|ctype|errno|fenv|float|inttypes|limits|locale|malloc|math|setjmp|signal|stdarg|stdbool|stddef|stdint|stdio|stdlib|string|tgmath|time|wchar|wctype).h>'
        Priority: 90
        CaseSensitive: true

    # Platform-specific headers
    -   Regex: '^.*'
        Priority: 5

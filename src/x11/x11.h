#ifndef FEJIX_X11_H_
#define FEJIX_X11_H_


// <malloc.h> - XCB requires to free() errors, events and replies

#include <X11/Xlib.h>
#include <xcb/xcb.h>

#include <fejix/base.h>

#include <src/shared/common/error.h>

#include <malloc.h>


// The atoms are sorted alphabetically here.
// clang-format off
#define FJ_X11_ATOM_MACROLIST \
    FJ_MACROLIST( \
        FJ_MACROITEM(_NET_WM_NAME) \
        FJ_MACROITEM(_NET_WM_SYNC_REQUEST) \
        FJ_MACROITEM(_NET_WM_SYNC_REQUEST_COUNTER) \
        FJ_MACROITEM(UTF8_STRING) \
        FJ_MACROITEM(WM_DELETE_WINDOW) \
        FJ_MACROITEM(WM_PROTOCOLS))
// clang-format on

#define FJ_X11_ATOM(ATOM_NAME) FJ_X11_ATOM_##ATOM_NAME

#undef FJ_MACROLIST
#undef FJ_MACROITEM
#define FJ_MACROITEM(ITEM) FJ_X11_ATOM(ITEM),
#define FJ_MACROLIST(...)             \
    enum fj_x11_atom                  \
    {                                 \
        __VA_ARGS__ FJ_X11_ATOM_COUNT \
    };
FJ_X11_ATOM_MACROLIST


enum
{
    /** Used in the event type to indicate that the message was generated by
        SendEvent/xcb_send_event. Remove it to inspect the actual event type. */
    FJ_X11_SEND_REQUEST_BIT = 1 << 7
};


struct fj_x11_create_window_data
{
    xcb_window_t window;

    /** If 0, the screen's root will be used. */
    xcb_window_t parent;

    struct fj_viewport2d viewport;

    /** 0 is XCB_COPY_FROM_PARENT */
    uint16_t window_class;

    xcb_event_mask_t event_mask;

    /** 0 is the default. */
    xcb_bool32_t override_redirect;

    /** 0 is XCB_COPY_FROM_PARENT */
    xcb_visualid_t visual;

    /** 0 is XCB_COPY_FROM_PARENT */
    xcb_colormap_t colormap;

    /** 0 is XCB_COPY_FROM_PARENT */
    uint8_t depth;

    /** 0 is XCB_COPY_FROM_PARENT */
    xcb_cursor_t cursor;
};


char const *fj_x11_get_error_message(uint8_t error_code);

fj_err fj_x11_connect(Display **out_display, xcb_connection_t **out_connection);

fj_err fj_x11_disconnect(Display *display);

fj_err fj_x11_flush(xcb_connection_t *c);

fj_err fj_x11_get_atoms(
    xcb_connection_t *c, xcb_atom_t atoms[FJ_X11_ATOM_COUNT]);

static inline uint8_t fj_x11_get_event_type(xcb_generic_event_t *event)
{
    return event->response_type & ~FJ_X11_SEND_REQUEST_BIT;
}

/**
    \param screen If NULL, the default screen will be used.
    \param data Most fields can be 0. Where inappropriate, the default values
        will be filled in. */
xcb_void_cookie_t fj_x11_create_window(
    xcb_connection_t *c,
    xcb_screen_t *screen,
    struct fj_x11_create_window_data *data);

fj_err fj_x11_check(xcb_connection_t *c, xcb_void_cookie_t coockie);

#endif
